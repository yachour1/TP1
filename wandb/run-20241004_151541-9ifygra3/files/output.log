/home/usagers/yaach/Documents/HLTP/evaluate_student.py:107: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  generator.load_state_dict(t.load(l_path + 'epoch' + name + '_g.pth', map_location='cuda:0'))
/home/usagers/yaach/Documents/HLTP/evaluate_student.py:108: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  gdEncoder.load_state_dict(t.load(l_path + 'epoch' + name + '_gd.pth', map_location='cuda:0'))
begin.................................
Shape of mask before view: torch.Size([128, 3])
Shape of mask after unsqueeze: torch.Size([128, 3, 1])
Shape of mask after view: torch.Size([128, 3])
Traceback (most recent call last):
  File "/home/usagers/yaach/Documents/HLTP/evaluate_student.py", line 231, in <module>
    evaluate.main(name=epoch, val=False)
  File "/home/usagers/yaach/Documents/HLTP/evaluate_student.py", line 172, in main
    values = gdEncoder(hist, nbrs, mask, va, nbrsva, lane, nbrslane, cls, nbrscls)
  File "/usagers3/yaach/miniconda3/envs/HLTP/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/usagers3/yaach/miniconda3/envs/HLTP/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/usagers/yaach/Documents/HLTP/Student/student_model.py", line 55, in forward
    mask = mask.view(mask.size(0), mask.size(1) * mask.size(2), mask.size(3))
IndexError: Dimension out of range (expected to be in range of [-2, 1], but got 2)
